#lang racket
(require graphics/graphics)
(open-graphics)
(define board (open-viewport "Ajedrez" 800 600))
((draw-pixmap board) "TableroAjedrez.png" (make-posn 0 0))
(define (DrawPiezes positions counter turn jaqueState)
    (define mainPosition positions)
    (define colorCube "0101010110101010010101011010101001010101101010100101010110101010")
    (define coordinates (make-posn (+ 100 (* (remainder counter 8) 50)) (+ 100 (* (quotient counter 8) 50))))
    (if (< counter (string-length mainPosition))
        (begin
            (if (equal? (string-ref mainPosition counter) #\T)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/TBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/TBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\C)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/CBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/CBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\A)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/AlBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/AlBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\R)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RaBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RaBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\Y)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RyBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RyBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\P)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/PnBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/PnBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\t)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/TWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/TWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\c)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/CWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/CWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\a)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/AlWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/AlWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\r)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RaWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RaWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\y)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RyWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RyWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\p)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/PnWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/PnWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\-)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/Tapec.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/Tapeb.png" coordinates)
                )
                (void)
            )
            (if (= turn 0)
                ((draw-pixmap board) "PiezasAjedrez/TurnoB.png" (make-posn 565 240))
                ((draw-pixmap board) "PiezasAjedrez/TurnoN.png" (make-posn 565 240))
            )
        )
        (void)
    )
    (if (= (DetectJaque positions #\t 0 turn "-TCARYP") 1)
        ((draw-pixmap board) "PiezasAjedrez/Jaque.png" (make-posn 565 290))
        (if (= jaqueState 2)
            ((draw-pixmap board) "PiezasAjedrez/JaqueMate.png" (make-posn 565 290))
            (void)
        )
    )
    (if (< counter 63)
        (DrawPiezes mainPosition (+ counter 1) turn jaqueState)
        (void)
    )
    (GetPosition mainPosition 0 #\L 0 0 turn jaqueState)
)
(define (GetPosition pieces preIndex prePieze preX preY turn jaqueState)
    (define position (mouse-click-posn (get-mouse-click board)))
    (define positionX (quotient (- (posn-x position) 100) 50))
    (define positionY (quotient (- (posn-y position) 100) 50))
    (define index (+ positionX (* positionY 8)))
    (define pieze (string-ref pieces index))
    (PlayGame pieces pieze index prePieze preIndex preX positionX preY positionY turn jaqueState)
)
(define (PlayGame positions selectPieze selectPiezeIndex prePieze preIndex preX posX preY posY turn jaqueState)
    (define blackPiezes "-TCARYP")
    (define whitePiezes "-tcaryp")
    (if (and (equal? prePieze #\L) (= preIndex 0))
        (GetPosition positions selectPiezeIndex selectPieze posX posY turn jaqueState)
        (void)
    )
    (if (= turn 1)
        (if (or (equal? prePieze #\T) (equal? prePieze #\C) (equal? prePieze #\A) (equal? prePieze #\R) (equal? prePieze #\Y) (equal? prePieze #\P))
            (begin
                (if (equal? prePieze #\P)
                    (MovePeon positions selectPiezeIndex preIndex #\P preX posX preY posY turn whitePiezes jaqueState)
                    (void)
                )
                (if (equal? prePieze #\T)
                    (MoveTorreAndQueen positions selectPiezeIndex preIndex #\T preX posX preY posY turn whitePiezes jaqueState)
                    (void)
                )
                (if (equal? prePieze #\A)
                    (MoveAlfilAndQueen positions selectPiezeIndex preIndex "A" preX posX preY posY turn whitePiezes jaqueState)
                    (void)
                )
                (if (equal? prePieze #\C)
                    (MoveHorse positions selectPiezeIndex preIndex "C" preX posX preY posY turn whitePiezes jaqueState)
                    (void)
                )
                (if (equal? prePieze #\Y)
                    (MoveKing positions selectPiezeIndex preIndex "Y" preX posX preY posY turn whitePiezes jaqueState)
                    (void)
                )
                (if (or (= posX preX) (= posY preY))
                    (if (equal? prePieze #\R)
                        (MoveTorreAndQueen positions selectPiezeIndex preIndex #\R preX posX preY posY turn whitePiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\R)
                        (MoveAlfilAndQueen positions selectPiezeIndex preIndex "R" preX posX preY posY turn whitePiezes jaqueState)
                        (void)
                    )
                )
                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
            )
            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
        )
        (if (or (equal? prePieze #\t) (equal? prePieze #\c) (equal? prePieze #\a) (equal? prePieze #\r) (equal? prePieze #\y) (equal? prePieze #\p))
            (begin
                (if (equal? prePieze #\p)
                    (MovePeon positions selectPiezeIndex preIndex #\p preX posX preY posY turn blackPiezes jaqueState)
                    (void)
                )       
                (if (equal? prePieze #\t)
                    (MoveTorreAndQueen positions selectPiezeIndex preIndex #\t preX posX preY posY turn blackPiezes jaqueState)
                    (void)
                )
                (if (equal? prePieze #\a)
                    (MoveAlfilAndQueen positions selectPiezeIndex preIndex "a" preX posX preY posY turn blackPiezes jaqueState)
                    (void)
                )
                (if (equal? prePieze #\c)
                    (MoveHorse positions selectPiezeIndex preIndex "c" preX posX preY posY turn blackPiezes jaqueState)
                    (void)
                )
                (if (equal? prePieze #\y)
                    (MoveKing positions selectPiezeIndex preIndex "y" preX posX preY posY turn blackPiezes jaqueState)
                    (void)
                )
                (if (or (= posX preX) (= posY preY))
                    (if (equal? prePieze #\r)
                        (MoveTorreAndQueen positions selectPiezeIndex preIndex #\r preX posX preY posY turn blackPiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\r)
                        (MoveAlfilAndQueen positions selectPiezeIndex preIndex "r" preX posX preY posY turn blackPiezes jaqueState)
                        (void)
                    )
                )
                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
            )
            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
        )
    )
    (GetPosition positions 0 #\L 0 0 turn jaqueState)
)
(define (MoveTorreAndQueen positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (define (VerificateObstaclesT positions indexI indexS keySide)
        (if (equal? keySide #\B)
            (if (= indexI (+ indexS 8))
                #t
                (if (equal? (string-ref positions (- indexI 8)) #\-)
                    (VerificateObstaclesT positions (- indexI 8) indexS keySide)
                    #f
                )
            )
            (if (equal? keySide #\F)
                (if (= indexI (- indexS 8))
                    #t
                    (if (equal? (string-ref positions (+ indexI 8)) #\-)
                        (VerificateObstaclesT positions (+ indexI 8) indexS keySide)
                        #f
                    )
                )
                (if (equal? keySide #\L)
                    (if (= indexI (+ indexS 1))
                        #t
                        (if (equal? (string-ref positions (- indexI 1)) #\-)
                            (VerificateObstaclesT positions (- indexI 1) indexS keySide)
                            #f
                        )
                    )
                    (if (= indexI (- indexS 1))
                        #t
                        (if (equal? (string-ref positions (+ indexI 1)) #\-)
                            (VerificateObstaclesT positions (+ indexI 1) indexS keySide)
                            #f
                        )
                    )
                )
            )
        )
    )
    (if (= preX posX)
        (if (< posY preY)
            (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\B)
                    (if (equal? key #\T)
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                        (if (equal? key #\R)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                            (if (equal? key #\r)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                        )
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
            )
            (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\F)
                    (if (equal? key #\T)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                        (if (equal? key #\R)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (if (equal? key #\r)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                        )
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
            )
        )
        (if (= preY posY)
            (if (< posX preX)
                (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                    (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\L)
                        (if (equal? key #\T)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                            (if (equal? key #\R)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                (if (equal? key #\r)
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                )
                            )
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
                (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                    (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\R)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\T)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                (if (equal? key #\R)
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                    (if (equal? key #\r)
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
        )
    )
)
(define (MoveAlfilAndQueen positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (define (VerificateObstacles positions indexI indexS keySide)
        (if (or (= indexI (- indexS 7)) (= indexI (+ indexS 7)) (= indexI (- indexS 9)) (= indexI (+ indexS 9)))
            #t
            (if (< indexS indexI)
                (if (equal? keySide #\R)
                    (if (equal? (string-ref positions (- indexI 9)) #\-)
                        (VerificateObstacles positions (- indexI 9) indexS keySide)
                        #f
                    )
                    (if (equal? (string-ref positions (- indexI 7)) #\-)
                        (VerificateObstacles positions (- indexI 7) indexS keySide)
                        #f
                    )
                )
                (if (equal? keySide #\R)
                    (if (equal? (string-ref positions (+ indexI 9)) #\-)
                        (VerificateObstacles positions (+ indexI 9) indexS keySide)
                        #f
                    )
                    (if (equal? (string-ref positions (+ indexI 7)) #\-)
                        (VerificateObstacles positions (+ indexI 7) indexS keySide)
                        #f
                    )
                )
            )
        )
    )
    (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
        (if (> posY preY)
            (if (> posX preX)
                (if (= preIndex (+ selectPiezeIndex (* 9 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\R)
                        (if (equal? key "A")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "A" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (if (equal? key "a")
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                (if (equal? key "R")
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                    (if (equal? key "r")
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                    )
                                )
                            )
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
                (if (= preIndex (+ selectPiezeIndex (* 7 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\L)
                        (if (equal? key "A")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "A" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (if (equal? key "a")
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                (if (equal? key "R")
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                    (if (equal? key "r")
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                                    )
                                )
                            )
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
            (if (> posX preX)
                (if (= preIndex (+ selectPiezeIndex (* 7 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\L)
                        (if (equal? key "A")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "A" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                            (if (equal? key "a")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                (if (equal? key "R")
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                    (if (equal? key "r")
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                    )
                                )
                            )
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
                (if (= preIndex (+ selectPiezeIndex (* 9 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\R)
                        (if (equal? key "A")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "A" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                            (if (equal? key "a")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                (if (equal? key "R")
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                    (if (equal? key "r")
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                    )
                                )
                            )
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
        )
        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
    )
)
(define (MovePeon positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (if (equal? key #\P)
        (begin
            (if (and (> preIndex 7) (< preIndex 16) (= selectPiezeIndex (+ preIndex 16)))
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (if (equal? (string-ref positions (- selectPiezeIndex 8)) #\-)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
                (if (= selectPiezeIndex (+ preIndex 8))
                    (if (equal? (string-ref positions selectPiezeIndex) #\-)
                        (begin
                            (if (and (= posY 7) (= preY 6))
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) (Coronation key) (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            )
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (or (= selectPiezeIndex (+ preIndex 7)) (= selectPiezeIndex (+ preIndex 9)))
                        (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                            (begin
                                (if (and (= posY 7) (= preY 6))
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) (Coronation key) (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                )
                            )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
            )
        )
        (begin
            (if (and (> preIndex 46) (< preIndex 56) (= selectPiezeIndex (- preIndex 16)))
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (if (equal? (string-ref positions (+ selectPiezeIndex 8)) #\-)
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
                (if (= selectPiezeIndex (- preIndex 8))
                    (if (equal? (string-ref positions selectPiezeIndex) #\-)
                        (begin
                            (if (and (= posY 0) (= preY 1))
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) (Coronation key) (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (or (= selectPiezeIndex (- preIndex 7)) (= selectPiezeIndex (- preIndex 9)))
                        (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                            (begin
                                (if (and (= posY 0) (= preY 1))
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) (Coronation key) (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                                )
                            )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
            )
        )
    )
)
(define (MoveHorse positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
        (if (< preY posY)
            (if (< posX preX)
                (if (= 2 (- posY preY))
                    (if (= (- preX 1) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (= 1 (- posY preY))
                        (if (= (- preX 2) posX)
                            (if (equal? key "C")
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
                (if (= 2 (- posY preY))
                    (if (= (+ preX 1) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (= 1 (- posY preY))
                        (if (= (+ preX 2) posX)
                            (if (equal? key "C")
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
            )
            (if (< posX preX)
                (if (= 2 (- preY posY))
                    (if (= (- preX 1) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (= 1 (- preY posY))
                        (if (= (- preX 2) posX)
                            (if (equal? key "C")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
                (if (= 2 (- preY posY))
                    (if (= (+ preX 1) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (= 1 (- preY posY))
                        (if (= (+ preX 2) posX)
                            (if (equal? key "C")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
            )
        )
        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
    )
)
(define (MoveKing positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
        (if (< preY posY)
            (if (= 1 (- posY preY))
                (if (< preX posX)
                    (if (= 1 (- posX preX))
                        (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (= preX posX)
                        (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                        (if (= 1 (- preX posX))
                            (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                    )
                )
                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
            )
            (if (= preY posY)
                (if (< preX posX)
                    (if (= 1 (- posX preX))
                        (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState)
                        )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                    (if (= 1 (- preX posX))
                        (if (equal? key "Y")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
                (if (= 1 (- preY posY))
                    (if (< preX posX)
                        (if (= 1 (- posX preX))
                            (if (equal? key "Y")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                        (if (= preX posX)
                            (if (equal? key "Y")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                            (if (= 1 (- preX posX))
                                (if (equal? key "Y")
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState)
                            )
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
        )
        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
    )
)
(define (Coronation key)
    (define coronation (open-viewport "Coronacion de peones" 400 200))
    (define blackPiezes "RTCA")
    (define whitePiezes "rtca")
    (if (equal? key #\p)
        ((draw-pixmap coronation) "PiezasAjedrez/CrB.png" (make-posn 0 0))
        ((draw-pixmap coronation) "PiezasAjedrez/CrN.png" (make-posn 0 0))
    )
    (define position (mouse-click-posn (get-mouse-click coronation)))
    (define positionX (quotient (- (posn-x position) 33) 83))
    (define positionY (quotient (- (posn-y position) 33) 133))
    (define index (+ positionX (* positionY 8)))
    (close-viewport coronation)
    (if (equal? key #\p)
        (~a (string-ref whitePiezes index))
        (~a (string-ref blackPiezes index))
    )
)
(define (DetectJaque positions piezeV indexV turn piezes)
    (define (SearchKing search count)
        (if (< count (string-length positions))
            (if (equal? (string-ref positions count) search)
                count
                (SearchKing search (+ count 1))
            )
            (void)
        )
    )
    (define posKing (SearchKing #\Y 0))
    (if (equal? piezeV #\t)
        (if (MoveTorreAndQueen positions posKing indexV #\v (remainder indexV 8) (remainder posKing 8) (quotient indexV 8) (quotient posKing 8) turn piezes 0)
            (+ 0 1)
            (+ 0 0)
        )
        (void)
    )
)
;(DrawPiezes "t---YACTPPPPPPPP--------------------------------pppppppptcaryact" 0 0 0)
(DrawPiezes "TCARYACTPPPPPPPP--------------------------------pppppppptcaryact" 0 0 0)
