#lang racket
#|
- Autor: Ing(c) Alejandro Grajales Vargas
- Nombre del lenguaje utilizado: Racket
- Versión del lenguaje utilizado: 8.15
- Presentado a: Doctor Ricardo Moreno Laverde
- Universidad Tecnológica de Pereira
- Programa de Ingeniería de Sistemas y Computación
- Descriptivo del programa: Este programa les permite a dos(2) jugadores jugar con las reglas del ajedrez de movimiento y ataque teniendo en cuenta solo el jaque, jaque mate y coronacion de peones.
- Nota: En cualquier momento de la partida cualquier jugador puede detener el juego mediante el boton de "Terminar".
|#
(require graphics/graphics)
(open-graphics)
(define board (open-viewport "Ajedrez" 800 600))
((draw-pixmap board) "TableroAjedrez.png" (make-posn 0 0))
#|
1. DrawPiezes
Purpose: Draws the chess pieces on the board based on their positions and handles the game state, including check and checkmate detection.
Parameters:
-positions: A string representing the positions of all pieces on the board.
-counter: Tracks the current index being processed.
-turn: Indicates the current player's turn (0 for white, 1 for black).
-jaqueState: Indicates if the king is in check (1 for check, 0 otherwise).
-lPieze: Last piece moved.
-lIndex: Index of the last piece moved.
-prePosition: Previous board state.
|#
(define (DrawPiezes positions counter turn jaqueState lPieze lIndex prePosition)
    (define (JaquePieze index key)
        (if (= key index)
            (- index 1)
            index
        )
    )
    (define (SearchKing search count)
        (if (< count (string-length positions))
            (if (equal? (string-ref positions count) search)
                count
                (SearchKing search (+ count 1))
            )
            (void)
        )
    )
    (define blackPiezes "-TCARYP")
    (define whitePiezes "-tcaryp")
    (define colorCube "0101010110101010010101011010101001010101101010100101010110101010")
    (define coordinates (make-posn (+ 100 (* (remainder counter 8) 50)) (+ 100 (* (quotient counter 8) 50))))
    (define piezeG (string-ref positions counter))
    (printf "~a" jaqueState)
    (if (and (= counter 0) (= jaqueState 1))
        (begin
            ((draw-pixmap board) "PiezasAjedrez/Jaque.png" (make-posn 565 290))
            (if (VerificateMoveJaque positions 0 turn)
                (DrawPiezes positions 0 turn 0 lPieze lIndex prePosition)
                (begin
                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                    (if (= turn 1)
                        (GetPosition prePosition 0 #\L 0 0 0 jaqueState)
                        (GetPosition prePosition 0 #\L 0 0 1 jaqueState)
                    )
                )
            )
        )
        (if (= counter 0)
            (if (= turn 1)
                (if (VerificateMove positions 0 0 (SearchKing #\y 0))
                    (void)
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                        (if (= turn 1)
                            (GetPosition prePosition 0 #\L 0 0 0 jaqueState)
                            (GetPosition prePosition 0 #\L 0 0 1 jaqueState)
                        )
                    )
                )
                (if (VerificateMove positions 0 1 (SearchKing #\Y 0))
                    (void)
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                        (if (= turn 1)
                            (GetPosition prePosition 0 #\L 0 0 0 jaqueState)
                            (GetPosition prePosition 0 #\L 0 0 1 jaqueState)
                        )
                    )
                )
            )
            (void)
        )
    )
    (if (< counter (string-length positions))
        (begin
            (if (equal? piezeG #\T)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/TBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/TBb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\C)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/CBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/CBb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\A)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/AlBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/AlBb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\R)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RaBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RaBb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\Y)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RyBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RyBb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\P)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/PnBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/PnBb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\t)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/TWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/TWb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\c)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/CWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/CWb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\a)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/AlWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/AlWb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\r)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RaWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RaWb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\y)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RyWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RyWb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\p)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/PnWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/PnWb.png" coordinates)
                )
                (void)
            )
            (if (equal? piezeG #\-)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/Tapec.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/Tapeb.png" coordinates)
                )
                (void)
            )
            (if (= turn 0)
                ((draw-pixmap board) "PiezasAjedrez/TurnoB.png" (make-posn 565 240))
                ((draw-pixmap board) "PiezasAjedrez/TurnoN.png" (make-posn 565 240))
            )
        )
        (void)
    )
    (if (< counter 63)
        (if (= jaqueState 1)
            (DrawPiezes positions (+ counter 1) turn jaqueState lPieze (JaquePieze lIndex counter) prePosition)
            (DrawPiezes positions (+ counter 1) turn (DetectJaque positions piezeG counter turn jaqueState) lPieze counter prePosition)
        )
        (if (or (= jaqueState 1) (= (DetectJaque positions piezeG counter turn jaqueState) 1))
            (if (= turn 0)
                (if (VerificateJaqueMate positions 1 1 turn lIndex (SearchKing #\y 0) blackPiezes "tarycpzx")
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JaqueMate.png" (make-posn 565 290))
                        (GetPosition positions 0 #\L 0 0 turn jaqueState)
                    )
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/Jaque.png" (make-posn 565 290))
                        (GetPosition positions 0 #\L 0 0 turn jaqueState)
                    )
                )
                (if (VerificateJaqueMate positions 1 1 turn lIndex (SearchKing #\Y 0) whitePiezes "TARYCPZX")
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JaqueMate.png" (make-posn 565 290))
                        (GetPosition positions 0 #\L 0 0 turn jaqueState)
                    )
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/Jaque.png" (make-posn 565 290))
                        (GetPosition positions 0 #\L 0 0 turn jaqueState)
                    )
                )
            )
            (begin
                ((draw-pixmap board) "PiezasAjedrez/TapeJaque.png" (make-posn 565 290))
                (GetPosition positions 0 #\L 0 0 turn jaqueState)
            )
        )
    )
)
#|
2. GetPosition
Purpose: Captures the position of a mouse click and determines the selected piece.
Parameters:
-pieces: Current board state.
-preIndex: Index of the previously selected piece.
-prePieze: Previously selected piece.
-preX, preY: Previous coordinates of the selected piece.
-turn: Current player's turn.
-jaqueState: Indicates if the king is in check.
|#
(define (GetPosition pieces preIndex prePieze preX preY turn jaqueState)
    (define position (mouse-click-posn (get-mouse-click board)))
    (if (and (> (posn-x position) 99) (> (posn-y position) 99) (< (posn-x position) 501) (< (posn-y position) 501))
        (void)
        (if (and (> (posn-x position) 566) (> (posn-y position) 400) (< (posn-x position) 744) (< (posn-y position) 450))
            (close-viewport board)
            (GetPosition pieces preIndex prePieze preX preY turn jaqueState)
        )
    )
    (define positionX (quotient (- (posn-x position) 100) 50))
    (define positionY (quotient (- (posn-y position) 100) 50))
    (define index (+ positionX (* positionY 8)))
    (define pieze (string-ref pieces index))
    (PlayGame pieces pieze index prePieze preIndex preX positionX preY positionY turn jaqueState)
)
#|
3. PlayGame
Purpose: Main game logic, handles piece selection and movement.
Parameters:
-positions: Current board state.
-selectPieze: Selected piece.
-selectPiezeIndex: Index of the selected piece.
-prePieze: Previously selected piece.
-preIndex: Index of the previously selected piece.
-preX, posX: Previous and current X coordinates.
-preY, posY: Previous and current Y coordinates.
-turn: Current player's turn.
-jaqueState: Indicates if the king is in check.
|#
(define (PlayGame positions selectPieze selectPiezeIndex prePieze preIndex preX posX preY posY turn jaqueState)
    (define blackPiezes "-TCARYP")
    (define whitePiezes "-tcaryp")
    (if (and (equal? prePieze #\L) (= preIndex 0))
        (GetPosition positions selectPiezeIndex selectPieze posX posY turn jaqueState)
        (void)
    )
    (if (= selectPiezeIndex preIndex)
        (begin
            ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
        )
        (if (= turn 1)
            (if (or (equal? prePieze #\T) (equal? prePieze #\C) (equal? prePieze #\A) (equal? prePieze #\R) (equal? prePieze #\Y) (equal? prePieze #\P))
                (begin
                    (if (equal? prePieze #\P)
                        (MovePeon positions selectPiezeIndex preIndex #\P preX posX preY posY turn whitePiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\T)
                        (MoveTorreAndQueen positions selectPiezeIndex preIndex #\T preX posX preY posY turn whitePiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\A)
                        (MoveAlfilAndQueen positions selectPiezeIndex preIndex "A" preX posX preY posY turn whitePiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\C)
                        (MoveHorse positions selectPiezeIndex preIndex "C" preX posX preY posY turn whitePiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\Y)
                        (MoveKing positions selectPiezeIndex preIndex "Y" preX posX preY posY turn whitePiezes jaqueState)
                        (void)
                    )
                    (if (or (= posX preX) (= posY preY))
                        (if (equal? prePieze #\R)
                            (MoveTorreAndQueen positions selectPiezeIndex preIndex #\R preX posX preY posY turn whitePiezes jaqueState)
                            (void)
                        )
                        (if (equal? prePieze #\R)
                            (MoveAlfilAndQueen positions selectPiezeIndex preIndex "R" preX posX preY posY turn whitePiezes jaqueState)
                            (void)
                        )
                    )
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
                (begin
                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
            (if (or (equal? prePieze #\t) (equal? prePieze #\c) (equal? prePieze #\a) (equal? prePieze #\r) (equal? prePieze #\y) (equal? prePieze #\p))
                (begin
                    (if (equal? prePieze #\p)
                        (MovePeon positions selectPiezeIndex preIndex #\p preX posX preY posY turn blackPiezes jaqueState)
                        (void)
                    )       
                    (if (equal? prePieze #\t)
                        (MoveTorreAndQueen positions selectPiezeIndex preIndex #\t preX posX preY posY turn blackPiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\a)
                        (MoveAlfilAndQueen positions selectPiezeIndex preIndex "a" preX posX preY posY turn blackPiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\c)
                        (MoveHorse positions selectPiezeIndex preIndex "c" preX posX preY posY turn blackPiezes jaqueState)
                        (void)
                    )
                    (if (equal? prePieze #\y)
                        (MoveKing positions selectPiezeIndex preIndex "y" preX posX preY posY turn blackPiezes jaqueState)
                        (void)
                    )
                    (if (or (= posX preX) (= posY preY))
                        (if (equal? prePieze #\r)
                            (MoveTorreAndQueen positions selectPiezeIndex preIndex #\r preX posX preY posY turn blackPiezes jaqueState)
                            (void)
                        )
                        (if (equal? prePieze #\r)
                            (MoveAlfilAndQueen positions selectPiezeIndex preIndex "r" preX posX preY posY turn blackPiezes jaqueState)
                            (void)
                        )
                    )
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
                (begin
                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
        )
    )
    (GetPosition positions 0 #\L 0 0 turn jaqueState)
)
#|
4. MoveTorreAndQueen
Purpose: Handles the movement of the rook and queen along straight paths (horizontal and vertical).
Parameters:
-positions: Current board state.
-selectPiezeIndex: Index of the selected piece.
-preIndex: Index of the previously selected piece.
-key: Piece type (T for black rook, t for white rook, etc.).
-preX, posX: Previous and current X coordinates.
-preY, posY: Previous and current Y coordinates.
-turn: Current player's turn.
-piezes: String representing the pieces of the current player.
-jaqueState: Indicates if the king is in check.
|#
(define (MoveTorreAndQueen positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (define (VerificateObstaclesT positions indexI indexS keySide)
        (if (equal? keySide #\B)
            (if (= indexI (+ indexS 8))
                #t
                (if (equal? (string-ref positions (- indexI 8)) #\-)
                    (VerificateObstaclesT positions (- indexI 8) indexS keySide)
                    #f
                )
            )
            (if (equal? keySide #\F)
                (if (= indexI (- indexS 8))
                    #t
                    (if (equal? (string-ref positions (+ indexI 8)) #\-)
                        (VerificateObstaclesT positions (+ indexI 8) indexS keySide)
                        #f
                    )
                )
                (if (equal? keySide #\L)
                    (if (= indexI (+ indexS 1))
                        #t
                        (if (equal? (string-ref positions (- indexI 1)) #\-)
                            (VerificateObstaclesT positions (- indexI 1) indexS keySide)
                            #f
                        )
                    )
                    (if (= indexI (- indexS 1))
                        #t
                        (if (equal? (string-ref positions (+ indexI 1)) #\-)
                            (VerificateObstaclesT positions (+ indexI 1) indexS keySide)
                            #f
                        )
                    )
                )
            )
        )
    )
    (if (= preX posX)
        (if (< posY preY)
            (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\B)
                    (if (equal? key #\v)
                        #t
                        (if (equal? key #\z)
                            (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                            (if (equal? key #\Z)
                                (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\x)
                                    (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key #\X)
                                        (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                        (if (equal? key #\T)
                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                            (if (equal? key #\R)
                                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key #\r)
                                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (equal? key #\v)
                    #f
                    (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                        positions
                        (begin
                            ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                    )
                )
            )
            (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\F)
                    (if (equal? key #\v)
                        #t
                        (if (equal? key #\z)
                            (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                            (if (equal? key #\Z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key #\x)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key #\X)
                                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                        (if (equal? key #\T)
                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                            (if (equal? key #\R)
                                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key #\r)
                                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (equal? key #\v)
                    #f
                    (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                        positions
                        (begin
                            ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                    )
                )
            )
        )
        (if (= preY posY)
            (if (< posX preX)
                (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                    (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\L)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key #\x)
                                        (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                        (if (equal? key #\X)
                                            (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                            (if (equal? key #\T)
                                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key #\R)
                                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                    (if (equal? key #\r)
                                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                    (if (VerificateObstaclesT positions preIndex selectPiezeIndex #\R)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key #\x)
                                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                        (if (equal? key #\X)
                                            (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                            (if (equal? key #\T)
                                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key #\R)
                                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                    (if (equal? key #\r)
                                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
            )
            (if (equal? key #\v)
                #f
                (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                    positions
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
            )
        )
    )
)
#|
5. MoveAlfilAndQueen
Purpose: Handles the movement of the bishop and queen along diagonal paths.
Parameters: Same as MoveTorreAndQueen.
|#
(define (MoveAlfilAndQueen positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (define (VerificateObstacles positions indexI indexS keySide)
        (if (or (= indexI (- indexS 7)) (= indexI (+ indexS 7)) (= indexI (- indexS 9)) (= indexI (+ indexS 9)))
            #t
            (if (< indexS indexI)
                (if (equal? keySide #\R)
                    (if (equal? (string-ref positions (- indexI 9)) #\-)
                        (VerificateObstacles positions (- indexI 9) indexS keySide)
                        #f
                    )
                    (if (equal? (string-ref positions (- indexI 7)) #\-)
                        (VerificateObstacles positions (- indexI 7) indexS keySide)
                        #f
                    )
                )
                (if (equal? keySide #\R)
                    (if (equal? (string-ref positions (+ indexI 9)) #\-)
                        (VerificateObstacles positions (+ indexI 9) indexS keySide)
                        #f
                    )
                    (if (equal? (string-ref positions (+ indexI 7)) #\-)
                        (VerificateObstacles positions (+ indexI 7) indexS keySide)
                        #f
                    )
                )
            )
        )
    )
    (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
        (if (> posY preY)
            (if (> posX preX)
                (if (= preIndex (+ selectPiezeIndex (* 9 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\R)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "A" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key #\x)
                                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                        (if (equal? key #\X)
                                            (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                            (if (equal? key "A")
                                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "A" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key "a")
                                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    (if (equal? key "R")
                                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                        (if (equal? key "r")
                                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (= preIndex (+ selectPiezeIndex (* 7 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\L)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "A" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key #\x)
                                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                        (if (equal? key #\X)
                                            (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                            (if (equal? key "A")
                                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "A" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key "a")
                                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    (if (equal? key "R")
                                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                        (if (equal? key "r")
                                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "a" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\X) (equal? key #\x))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
            )
            (if (> posX preX)
                (if (= preIndex (+ selectPiezeIndex (* 7 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\L)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 selectPiezeIndex) "A" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key #\x)
                                        (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                        (if (equal? key #\X)
                                            (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                            (if (equal? key "A")
                                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "A" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key "a")
                                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    (if (equal? key "R")
                                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                        (if (equal? key "r")
                                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (= preIndex (+ selectPiezeIndex (* 9 (- preY posY))))
                    (if (VerificateObstacles positions preIndex selectPiezeIndex #\R)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 selectPiezeIndex) "A" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key #\x)
                                        (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                        (if (equal? key #\X)
                                            (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                            (if (equal? key "A")
                                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "A" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                (if (equal? key "a")
                                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                    (if (equal? key "R")
                                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                                        (if (equal? key "r")
                                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "a" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
            )
        )
        (if (equal? key #\v)
            #f
            (if (or (equal? key #\Z) (equal? key #\z) (equal? key #\x) (equal? key #\X))
                positions
                (begin
                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
        )
    )
)
#|
6. MovePeon
Purpose: Handles the movement of pawns, including capturing and promotion.
Parameters: Same as MoveTorreAndQueen.
|#
(define (MovePeon positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (if (or (equal? key #\P) (equal? key #\V) (equal? key #\Z))
        (if (and (> preIndex 7) (< preIndex 16) (= selectPiezeIndex (+ preIndex 16)))
            (if (equal? (string-ref positions selectPiezeIndex) #\-)
                (if (equal? (string-ref positions (- selectPiezeIndex 8)) #\-)
                    (if (equal? key #\Z)
                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                    )
                    (if (equal? key #\V)
                        #f
                        (if (equal? key #\Z)
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (equal? key #\V)
                    #f
                    (if (equal? key #\Z)
                        positions
                        (begin
                            ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                    )
                )
            )
            (if (= selectPiezeIndex (+ preIndex 8))
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (if (equal? key #\Z)
                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                        (begin
                            (if (and (= posY 7) (= preY 6))
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) (Coronation key) (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                            )
                        )
                    )
                    (if (equal? key #\V)
                        #f
                        (if (equal? key #\Z)
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (or (and (> preX 0) (= selectPiezeIndex (+ preIndex 7))) (and (< preX 7) (= selectPiezeIndex (+ preIndex 9))))
                    (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                        (if (equal? key #\V)
                            #t
                            (if (equal? key #\Z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (and (= posY 7) (= preY 6))
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) (Coronation key) (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                )
                            )
                        )
                        (if (equal? key #\V)
                            #f
                            (if (equal? key #\Z)
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\V)
                        #f
                        (if (equal? key #\Z)
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
            )
        )
        (begin
            (if (and (> preIndex 46) (< preIndex 56) (= selectPiezeIndex (- preIndex 16)))
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (if (equal? (string-ref positions (+ selectPiezeIndex 8)) #\-)
                        (if (equal? key #\z)
                            (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                        )
                        (if (equal? key #\v)
                            #f
                            (if (equal? key #\z)
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (equal? key #\v)
                        #f
                        (if (equal? key #\z)
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (= selectPiezeIndex (- preIndex 8))
                    (if (equal? (string-ref positions selectPiezeIndex) #\-)
                        (if (equal? key #\z)
                            (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                            (if (and (= posY 0) (= preY 1))
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) (Coronation key) (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (equal? key #\z)
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (or (and (< preX 7) (= selectPiezeIndex (- preIndex 7))) (and (> preX 0) (= selectPiezeIndex (- preIndex 9))))
                        (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
                            (if (equal? key #\v)
                                #t
                                (if (equal? key #\z)
                                    (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (and (= posY 0) (= preY 1))
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) (Coronation key) (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                            (if (equal? key #\v)
                                #f
                                (if (equal? key #\z)
                                    positions
                                    (begin
                                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (equal? key #\z)
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)
#|
7. MoveHorse
Purpose: Handles the movement of knights.
Parameters: Same as MoveTorreAndQueen.
|#
(define (MoveHorse positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
        (if (< preY posY)
            (if (< posX preX)
                (if (= 2 (- posY preY))
                    (if (= (- preX 1) posX)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key "C")
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (= 1 (- posY preY))
                        (if (= (- preX 2) posX)
                            (if (equal? key #\v)
                                #t
                                (if (equal? key #\z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key #\Z)
                                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                        (if (equal? key "C")
                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                        )
                                    )
                                )
                            )
                            (if (equal? key #\v)
                                #f
                                (if (or (equal? key #\z) (equal? key #\Z))
                                    positions
                                    (begin
                                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                )
                (if (= 2 (- posY preY))
                    (if (= (+ preX 1) posX)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key "C")
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (= 1 (- posY preY))
                        (if (= (+ preX 2) posX)
                            (if (equal? key #\v)
                                #t
                                (if (equal? key #\z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key #\Z)
                                        (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                        (if (equal? key "C")
                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                        )
                                    )
                                )
                            )
                            (if (equal? key #\v)
                                #f
                                (if (or (equal? key #\z) (equal? key #\Z))
                                    positions
                                    (begin
                                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                )
            )
            (if (< posX preX)
                (if (= 2 (- preY posY))
                    (if (= (- preX 1) posX)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key "C")
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (= 1 (- preY posY))
                        (if (= (- preX 2) posX)
                            (if (equal? key #\v)
                                #t
                                (if (equal? key #\z)
                                    (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key #\Z)
                                        (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                        (if (equal? key "C")
                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                        )
                                    )
                                )
                            )
                            (if (equal? key #\v)
                                #f
                                (if (or (equal? key #\z) (equal? key #\Z))
                                    positions
                                    (begin
                                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                )
                (if (= 2 (- preY posY))
                    (if (= (+ preX 1) posX)
                        (if (equal? key #\v)
                            #t
                            (if (equal? key #\z)
                                (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key "C")
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                    (if (= 1 (- preY posY))
                        (if (= (+ preX 2) posX)
                            (if (equal? key #\v)
                                #t
                                (if (equal? key #\z)
                                    (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key #\Z)
                                        (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                        (if (equal? key "C")
                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                        )
                                    )
                                )
                            )
                            (if (equal? key #\v)
                                #f
                                (if (or (equal? key #\z) (equal? key #\Z))
                                    positions
                                    (begin
                                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                    )
                                )
                            )
                        )
                        (if (equal? key #\v)
                            #f
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                )
            )
        )
        (if (equal? key #\v)
            #f
            (if (or (equal? key #\z) (equal? key #\Z))
                positions
                (begin
                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                )
            )
        )
    )
)
#|
8. MoveKing
Purpose: Handles the movement of the king, including castling and avoiding check.
Parameters: Same as MoveTorreAndQueen.
|#
(define (MoveKing positions selectPiezeIndex preIndex key preX posX preY posY turn piezes jaqueState)
    (if (or (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 0)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 1)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 2)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 3)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 4)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 5)) (equal? (string-ref positions selectPiezeIndex) (string-ref piezes 6)))
        (if (< preY posY)
            (if (= 1 (- posY preY))
                (if (< preX posX)
                    (if (= 1 (- posX preX))
                        (if (equal? key #\z)
                            (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                            (if (equal? key #\Z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key "Y")
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                )
                            )
                        )
                        (if (or (equal? key #\z) (equal? key #\Z))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                    (if (= preX posX)
                        (if (equal? key #\z)
                            (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                            (if (equal? key #\Z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key "Y")
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                )
                            )
                        )
                        (if (= 1 (- preX posX))
                            (if (equal? key #\z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                    (if (equal? key "Y")
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                    )
                )
                (if (or (equal? key #\z) (equal? key #\Z))
                    positions
                    (begin
                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                    )
                )
            )
            (if (= preY posY)
                (if (< preX posX)
                    (if (= 1 (- posX preX))
                        (if (equal? key #\z)
                            (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                            (if (equal? key #\Z)
                                (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions)))
                                (if (equal? key "Y")
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                )
                            )
                        )
                        (if (or (equal? key #\z) (equal? key #\Z))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                    (if (= 1 (- preX posX))
                        (if (equal? key #\z)
                            (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                            (if (equal? key #\Z)
                                (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key "Y")
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                )
                            )
                        )
                        (if (or (equal? key #\z) (equal? key #\Z))
                            positions
                            (begin
                                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                            )
                        )
                    )
                )
                (if (= 1 (- preY posY))
                    (if (< preX posX)
                        (if (= 1 (- posX preX))
                            (if (equal? key #\z)
                                (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key "Y")
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                            (if (or (equal? key #\z) (equal? key #\Z))
                                positions
                                (begin
                                    ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                    (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                )
                            )
                        )
                        (if (= preX posX)
                            (if (equal? key #\z)
                                (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                (if (equal? key #\Z)
                                    (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key "Y")
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                    )
                                )
                            )
                            (if (= 1 (- preX posX))
                                (if (equal? key #\z)
                                    (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                    (if (equal? key #\Z)
                                        (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions)))
                                        (if (equal? key "Y")
                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 0 jaqueState key selectPiezeIndex positions)
                                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0 1 jaqueState key selectPiezeIndex positions)
                                        )
                                    )
                                )
                                (if (or (equal? key #\z) (equal? key #\Z))
                                    positions
                                    (begin
                                        ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                                        (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                                    )
                                )
                            )
                        )
                    )
                    (if (or (equal? key #\z) (equal? key #\Z))
                        positions
                        (begin
                            ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                            (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
                        )
                    )
                )
            )
        )
        (if (or (equal? key #\z) (equal? key #\Z))
            positions
            (begin
                ((draw-pixmap board) "PiezasAjedrez/JugadaI.png" (make-posn 565 290))
                (PlayGame positions #\L 0 #\L 0 0 0 0 0 turn jaqueState)
            )
        )
    )
)
#|
9. Coronation
Purpose: Handles pawn promotion, allowing the player to select a new piece (queen, rook, bishop, or knight).
Parameters:
-key: Indicates the color of the pawn being promoted (p for white, P for black).
|#
(define (Coronation key)
    (define coronation (open-viewport "Coronacion de peones" 400 200))
    (define blackPiezes "RTCA")
    (define whitePiezes "rtca")
    (if (equal? key #\p)
        ((draw-pixmap coronation) "PiezasAjedrez/CrB.png" (make-posn 0 0))
        ((draw-pixmap coronation) "PiezasAjedrez/CrN.png" (make-posn 0 0))
    )
    (define position (mouse-click-posn (get-mouse-click coronation)))
    (define positionX (quotient (- (posn-x position) 33) 83))
    (define positionY (quotient (- (posn-y position) 33) 133))
    (define index (+ positionX (* positionY 8)))
    (close-viewport coronation)
    (if (equal? key #\p)
        (~a (string-ref whitePiezes index))
        (~a (string-ref blackPiezes index))
    )
)
#|
10. DetectJaque
Purpose: Detects if a king is in check by verifying if any opposing piece can attack the king.
Parameters:
-positions: Current board state.
-piezeV: Piece being checked for attacks.
-indexV: Index of the piece being checked.
-turn: Current player's turn.
-jaqueState: Indicates if the king is in check.
|#
(define (DetectJaque positions piezeV indexV turn jaqueState)
    (define (SearchKing search count)
        (if (< count (string-length positions))
            (if (equal? (string-ref positions count) search)
                count
                (SearchKing search (+ count 1))
            )
            (void)
        )
    )
    (define posKingB (SearchKing #\Y 0))
    (define posKingW (SearchKing #\y 0))
    (define blackPiezes "-TCARYP")
    (define whitePiezes "-tcaryp")
    (if (= jaqueState 0)
        (if (equal? (~a piezeV) "t")
            (if (MoveTorreAndQueen positions posKingB indexV #\v (remainder indexV 8) (remainder posKingB 8) (quotient indexV 8) (quotient posKingB 8) turn blackPiezes 0)
                (+ 0 1)
                (+ 0 0)
            )
            (if (equal? (~a piezeV) "r")
                (if (MoveTorreAndQueen positions posKingB indexV #\v (remainder indexV 8) (remainder posKingB 8) (quotient indexV 8) (quotient posKingB 8) turn blackPiezes 0)
                    (+ 0 1)
                    (if (MoveAlfilAndQueen positions posKingB indexV #\v (remainder indexV 8) (remainder posKingB 8) (quotient indexV 8) (quotient posKingB 8) turn blackPiezes 0)
                        (+ 0 1)
                        (+ 0 0)
                    )
                )
                (if (equal? (~a piezeV) "a")
                    (if (MoveAlfilAndQueen positions posKingB indexV #\v (remainder indexV 8) (remainder posKingB 8) (quotient indexV 8) (quotient posKingB 8) turn blackPiezes 0)
                        (+ 0 1)
                        (+ 0 0)
                    )
                    (if (equal? (~a piezeV) "c")
                        (if (MoveHorse positions posKingB indexV #\v (remainder indexV 8) (remainder posKingB 8) (quotient indexV 8) (quotient posKingB 8) turn blackPiezes 0)
                            (+ 0 1)
                            (+ 0 0)
                        )
                        (if (equal? (~a piezeV) "p")
                            (if (MovePeon positions posKingB indexV #\v (remainder indexV 8) (remainder posKingB 8) (quotient indexV 8) (quotient posKingB 8) turn blackPiezes 0)
                                (+ 0 1)
                                (+ 0 0)
                            )
                            (if (equal? (~a piezeV) "T")
                                (if (MoveTorreAndQueen positions posKingW indexV #\v (remainder indexV 8) (remainder posKingW 8) (quotient indexV 8) (quotient posKingW 8) turn whitePiezes 0)
                                    (+ 0 1)
                                    (+ 0 0)
                                )
                                (if (equal? (~a piezeV) "R")
                                    (if (MoveTorreAndQueen positions posKingW indexV #\v (remainder indexV 8) (remainder posKingW 8) (quotient indexV 8) (quotient posKingW 8) turn whitePiezes 0)
                                        (+ 0 1)
                                        (if (MoveAlfilAndQueen positions posKingW indexV #\v (remainder indexV 8) (remainder posKingW 8) (quotient indexV 8) (quotient posKingW 8) turn whitePiezes 0)
                                            (+ 0 1)
                                            (+ 0 0)
                                        )
                                    )
                                    (if (equal? (~a piezeV) "A")
                                        (if (MoveAlfilAndQueen positions posKingW indexV #\v (remainder indexV 8) (remainder posKingW 8) (quotient indexV 8) (quotient posKingW 8) turn whitePiezes 0)
                                            (+ 0 1)
                                            (+ 0 0)
                                        )
                                        (if (equal? (~a piezeV) "C")
                                            (if (MoveHorse positions posKingW indexV #\v (remainder indexV 8) (remainder posKingW 8) (quotient indexV 8) (quotient posKingW 8) turn whitePiezes 0)
                                                (+ 0 1)
                                                (+ 0 0)
                                            )
                                            (if (equal? (~a piezeV) "P")
                                                (if (MovePeon positions posKingW indexV #\V (remainder indexV 8) (remainder posKingW 8) (quotient indexV 8) (quotient posKingW 8) turn whitePiezes 0)
                                                    (+ 0 1)
                                                    (+ 0 0)
                                                )
                                                (+ 0 0)
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        jaqueState
    )
)
#|
11. VerificateJaqueMate
Purpose: Verifies if the current player is in checkmate by testing all possible moves.
Parameters:
-positions: Current board state.
-counter: Tracks the current index being processed.
-step: Indicates the current step in the checkmate verification process.
-turn: Current player's turn.
-jaqueIndex: Index of the piece causing the check.
-posKing: Index of the king being checked.
-piezes: String representing the pieces of the opposing player.
-fPiezes: String representing the pieces of the current player.
|#
(define (VerificateJaqueMate positions counter step turn jaqueIndex posKing piezes fPiezes)
    (define (TestPos value counte)
        (if (< counte (string-length value))
            (if (= 1 (DetectJaque value (string-ref value counte) counte turn 0))
                #f
                (TestPos value (+ counte 1))
            )
            #t
        )
    )
    (define (ComparateStrings posE)
        (if (equal? positions posE)
            #f
            (TestPos posE 0)
        )
    )
    (printf "JaqueIndex: ~a\n" jaqueIndex)
    (printf "Step: ~a\n" step)
    (define (GeneratePos posKing posGenerate)
        (if (= posKing posGenerate)
            (void)
            (if (= (remainder posGenerate 8) (remainder posKing 8))
                (if (< (quotient posGenerate 8) (quotient posKing 8))
                    (VerificateJaqueMate positions 0 2 turn (+ posGenerate 8) posKing piezes fPiezes)
                    (VerificateJaqueMate positions 0 2 turn (- posGenerate 8) posKing piezes fPiezes)
                )
                (if (= (quotient posGenerate 8) (quotient posKing 8))
                    (if (< (remainder posGenerate 8) (remainder posKing 8))
                        (VerificateJaqueMate positions 0 2 turn (+ posGenerate 1) posKing piezes fPiezes)
                        (VerificateJaqueMate positions 0 2 turn (- posGenerate 1) posKing piezes fPiezes)
                    )
                    (if (> (remainder posGenerate 8) (remainder posKing 8))
                        (if (< (quotient posGenerate 8) (quotient posKing 8))
                            (VerificateJaqueMate positions 0 2 turn (+ posGenerate 7) posKing piezes fPiezes)
                            (VerificateJaqueMate positions 0 2 turn (- posGenerate 9) posKing piezes fPiezes)
                        )
                        (if (< (quotient posGenerate 8) (quotient posKing 8))
                            (VerificateJaqueMate positions 0 2 turn (+ posGenerate 9) posKing piezes fPiezes)
                            (VerificateJaqueMate positions 0 2 turn (- posGenerate 7) posKing piezes fPiezes)
                        )
                    )
                )
            )
        )
    )
    (if (< counter (string-length positions))
        (if (= step 1)
            (if (> posKing 7)
                (if (ComparateStrings (MoveKing positions (- posKing counter) posKing (string-ref fPiezes 6) (remainder posKing 8) (remainder (- posKing counter) 8) (quotient posKing 8) (quotient (- posKing counter) 8) turn piezes 0))
                    #f
                    (if (and (< posKing 64) (> posKing 54) (= counter 1))
                        (if (ComparateStrings (MoveKing positions (+ posKing counter) posKing (string-ref fPiezes 6) (remainder posKing 8) (remainder (+ posKing counter) 8) (quotient posKing 8) (quotient (+ posKing counter) 8) turn piezes 0))
                            #f
                            (if (= counter 1)
                                (VerificateJaqueMate positions (+ counter 7) step turn jaqueIndex posKing piezes fPiezes)
                                (if (< counter 10)
                                    (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                    (VerificateJaqueMate positions 0 2 turn jaqueIndex posKing piezes fPiezes)
                                )
                            )
                        )
                        (if (< posKing 54)
                            (if (ComparateStrings (MoveKing positions (+ posKing counter) posKing (string-ref fPiezes 6) (remainder posKing 8) (remainder (+ posKing counter) 8) (quotient posKing 8) (quotient (+ posKing counter) 8) turn piezes 0))
                                #f
                                (if (= counter 1)
                                    (VerificateJaqueMate positions (+ counter 7) step turn jaqueIndex posKing piezes fPiezes)
                                    (if (< counter 10)
                                        (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                        (VerificateJaqueMate positions 0 2 turn jaqueIndex posKing piezes fPiezes)
                                    )
                                )
                            )
                            (if (< counter 10)
                                (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                (VerificateJaqueMate positions 0 2 turn jaqueIndex posKing piezes fPiezes)
                            )
                        )
                    )
                )
                (if (ComparateStrings (MoveKing positions (+ posKing counter) posKing (string-ref fPiezes 6) (remainder posKing 8) (remainder (+ posKing counter) 8) (quotient posKing 8) (quotient (+ posKing counter) 8) turn piezes 0))
                    #f
                    (if (and (< posKing 8) (>= posKing 0) (= counter 1))
                        (if (ComparateStrings (MoveKing positions (- posKing counter) posKing (string-ref fPiezes 6) (remainder posKing 8) (remainder (- posKing counter) 8) (quotient posKing 8) (quotient (- posKing counter) 8) turn piezes 0))
                            #f
                            (if (= counter 1)
                                (VerificateJaqueMate positions (+ counter 7) step turn jaqueIndex posKing piezes fPiezes)
                                (if (< counter 10)
                                    (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                    (VerificateJaqueMate positions 0 2 turn jaqueIndex posKing piezes fPiezes)
                                )
                            )
                        )
                        (if (> posKing 7)
                            (if (ComparateStrings (MoveKing positions (- posKing counter) posKing (string-ref fPiezes 6) (remainder posKing 8) (remainder (- posKing counter) 8) (quotient posKing 8) (quotient (- posKing counter) 8) turn piezes 0))
                                #f
                                (if (= counter 1)
                                    (VerificateJaqueMate positions (+ counter 7) step turn jaqueIndex posKing piezes fPiezes)
                                    (if (< counter 10)
                                        (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                        (VerificateJaqueMate positions 0 2 turn jaqueIndex posKing piezes fPiezes)
                                    )
                                )
                            )
                            (if (< counter 10)
                                (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                (VerificateJaqueMate positions 0 2 turn jaqueIndex posKing piezes fPiezes)
                            )
                        )
                    )
                )
            )
            (if (= step 2)
                (if (< counter (string-length positions))
                    (if (equal? (~a (string-ref positions counter)) (~a (string-ref fPiezes 0)))
                        (if (ComparateStrings (MoveTorreAndQueen positions jaqueIndex counter (string-ref fPiezes 6) (remainder counter 8) (remainder jaqueIndex 8) (quotient counter 8) (quotient jaqueIndex 8) turn piezes 0))
                            #f
                            (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                        )
                        (if (equal? (~a (string-ref positions counter)) (~a (string-ref fPiezes 1)))
                            (if (ComparateStrings (MoveAlfilAndQueen positions jaqueIndex counter (string-ref fPiezes 6) (remainder counter 8) (remainder jaqueIndex 8) (quotient counter 8) (quotient jaqueIndex 8) turn piezes 0))
                                #f
                                (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                            )
                            (if (equal? (~a (string-ref positions counter)) (~a (string-ref fPiezes 2)))
                                (if (ComparateStrings (MoveTorreAndQueen positions jaqueIndex counter (string-ref fPiezes 7) (remainder counter 8) (remainder jaqueIndex 8) (quotient counter 8) (quotient jaqueIndex 8) turn piezes 0))
                                    #f
                                    (if (ComparateStrings (MoveAlfilAndQueen positions jaqueIndex counter (string-ref fPiezes 7) (remainder counter 8) (remainder jaqueIndex 8) (quotient counter 8) (quotient jaqueIndex 8) turn piezes 0))
                                        #f
                                        (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                    )
                                )
                                (if (equal? (~a (string-ref positions counter)) (~a (string-ref fPiezes 3)))
                                    (if (ComparateStrings (MoveKing positions jaqueIndex counter (string-ref fPiezes 6) (remainder counter 8) (remainder jaqueIndex 8) (quotient counter 8) (quotient jaqueIndex 8) turn piezes 0))
                                        #f
                                        (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                    )
                                    (if (equal? (~a (string-ref positions counter)) (~a (string-ref fPiezes 4)))
                                        (if (ComparateStrings (MoveHorse positions jaqueIndex counter (string-ref fPiezes 6) (remainder counter 8) (remainder jaqueIndex 8) (quotient counter 8) (quotient jaqueIndex 8) turn piezes 0))
                                            #f
                                            (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                        )
                                        (if (equal? (~a (string-ref positions counter)) (~a (string-ref fPiezes 5)))
                                            (if (ComparateStrings (MovePeon positions jaqueIndex counter (string-ref fPiezes 6) (remainder counter 8) (remainder jaqueIndex 8) (quotient counter 8) (quotient jaqueIndex 8) turn piezes 0))
                                                #f
                                                (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                            )
                                            (VerificateJaqueMate positions (+ counter 1) step turn jaqueIndex posKing piezes fPiezes)
                                        )
                                    )
                                )
                            )
                        )
                    )
                    #t
                )
                #t
            )
        )
        (if (= turn 0)
            (if (> jaqueIndex posKing)
                (GeneratePos posKing jaqueIndex)
                (if (< jaqueIndex posKing)
                    (GeneratePos posKing jaqueIndex)
                    #t
                )
            )
            (if (> jaqueIndex posKing)
                (GeneratePos posKing jaqueIndex)
                (if (< jaqueIndex posKing)
                    (GeneratePos posKing jaqueIndex)
                    #t
                )
            )
        )
    )
)
#|
12. VerificateMoveJaque
Purpose: Verifies if any move can remove the check state.
Parameters:
-positions: Current board state.
-counter: Tracks the current index being processed.
-turn: Current player's turn.
|#
(define (VerificateMoveJaque positions counter turn)
    (if (< counter (string-length positions))
        (if (= (DetectJaque positions (string-ref positions counter) counter turn 0) 1)
            #f
            (VerificateMoveJaque positions (+ counter 1) turn)
        )
        #t
    )
)
#|
Function: VerificateMove
Purpose: Verifies if any move can prevent the king from being in check.
Parameters:
- positions: Current board state as a string.
- counter: Tracks the current index being processed.
- turn: Current player's turn (0 for white, 1 for black).
- posKing: Index of the king being checked.
Internal Variables:
- blackPiezesV: String representing black pieces that can attack ("TRACP").
- whitePiezesV: String representing white pieces that can attack ("tracp").
- blackPiezes: String representing all black pieces ("-TCARYP").
- whitePiezes: String representing all white pieces ("-tcaryp").
Behavior:
- Iterates through all pieces on the board to check if any move can prevent the king from being in check.
- Calls the `DetectPreJaque` function to determine if a move resolves the check.
- Returns `#t` if the check can be resolved, otherwise `#f`.
|#
(define (VerificateMove positions counter turn posKing)
    (define blackPiezesV "TRACPV")
    (define whitePiezesV "tracpv")
    (define blackPiezes "-TCARYP")
    (define whitePiezes "-tcaryp")
    (if (= turn 1)
        (if (< counter (string-length positions))
            (if (= (DetectPreJaque positions (string-ref positions counter) counter turn 0 blackPiezes whitePiezesV posKing) 1)
                #f
                (VerificateMove positions (+ counter 1) turn posKing)
            )
            #t
        )
        (if (< counter (string-length positions))
            (if (= (DetectPreJaque positions (string-ref positions counter) counter turn 0 whitePiezes blackPiezesV posKing) 1)
                #f
                (VerificateMove positions (+ counter 1) turn posKing)
            )
            #t
        )
    )
)
#|
Function: DetectPreJaque
Purpose: Detects if a specific piece can attack the king's position, potentially causing a check.
Parameters:
- positions: Current board state as a string.
- piezeV: The piece being checked for potential attacks.
- indexV: Index of the piece being checked.
- turn: Current player's turn (0 for white, 1 for black).
- jaqueState: Indicates if the king is in check (1 for check, 0 otherwise).
- fPiezes: String representing the pieces of the current player
- piezes: String representing the pieces of the opposing player.
- posKing: Index of the king being checked.
Behavior:
- Checks if the specified piece (`piezeV`) can attack the king's position (`posKing`).
- Calls movement functions (`MoveTorreAndQueen`, `MoveAlfilAndQueen`, `MoveHorse`, `MovePeon`) to validate potential attacks.
- Returns `1` if the piece can attack the king, otherwise `0`.
|#
(define (DetectPreJaque positions piezeV indexV turn jaqueState fPiezes piezes posKing)
    (if (= jaqueState 0)
        (if (equal? (~a piezeV) (~a (string-ref piezes 0)))
            (if (MoveTorreAndQueen positions posKing indexV #\v (remainder indexV 8) (remainder posKing 8) (quotient indexV 8) (quotient posKing 8) turn fPiezes 0)
                (+ 0 1)
                (+ 0 0)
            )
            (if (equal? (~a piezeV) (~a (string-ref piezes 1)))
                (if (MoveTorreAndQueen positions posKing indexV #\v (remainder indexV 8) (remainder posKing 8) (quotient indexV 8) (quotient posKing 8) turn fPiezes 0)
                    (+ 0 1)
                    (if (MoveAlfilAndQueen positions posKing indexV #\v (remainder indexV 8) (remainder posKing 8) (quotient indexV 8) (quotient posKing 8) turn fPiezes 0)
                        (+ 0 1)
                        (+ 0 0)
                    )
                )
                (if (equal? (~a piezeV) (~a (string-ref piezes 2)))
                    (if (MoveAlfilAndQueen positions posKing indexV #\v (remainder indexV 8) (remainder posKing 8) (quotient indexV 8) (quotient posKing 8) turn fPiezes 0)
                        (+ 0 1)
                        (+ 0 0)
                    )
                    (if (equal? (~a piezeV) (~a (string-ref piezes 3)))
                        (if (MoveHorse positions posKing indexV #\v (remainder indexV 8) (remainder posKing 8) (quotient indexV 8) (quotient posKing 8) turn fPiezes 0)
                            (+ 0 1)
                            (+ 0 0)
                        )
                        (if (equal? (~a piezeV) (~a (string-ref piezes 4)))
                            (if (MovePeon positions posKing indexV (string-ref piezes 5) (remainder indexV 8) (remainder posKing 8) (quotient indexV 8) (quotient posKing 8) turn fPiezes 0)
                                (+ 0 1)
                                (+ 0 0)
                            )
                            (+ 0 0)
                        )
                    )
                )
            )
        )
        jaqueState
    )
)
;(DrawPiezes "TCARYACTPPPPPPPP--------------------------------pppppppptcaryact" 0 0 0 #\t 0 "")
(DrawPiezes "-----Y------T-P--PA-pP---------PP----p----p-----pp--t-pp---t---y" 63 0 0 #\t 0 "")