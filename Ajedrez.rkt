#lang racket
(require graphics/graphics)
(open-graphics)
(define board (open-viewport "Ajedrez" 600 600))
((draw-pixmap board) "TableroAjedrez.png" (make-posn 0 0))
(define (DrawPiezes positions counter)
    (define mainPosition positions)
    (define colorCube "0101010110101010010101011010101001010101101010100101010110101010")
    (define coordinates (make-posn (+ 100 (* (remainder counter 8) 50)) (+ 100 (* (quotient counter 8) 50))))
    (if (< counter (string-length mainPosition))
        (begin
            (if (equal? (string-ref mainPosition counter) #\T)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/TBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/TBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\C)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/CBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/CBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\A)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/AlBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/AlBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\R)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RaBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RaBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\Y)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RyBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RyBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\P)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/PnBc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/PnBb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\t)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/TWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/TWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\c)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/CWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/CWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\a)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/AlWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/AlWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\r)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RaWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RaWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\y)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/RyWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/RyWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\p)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/PnWc.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/PnWb.png" coordinates)
                )
                (void)
            )
            (if (equal? (string-ref mainPosition counter) #\-)
                (if (equal? (string-ref colorCube counter) #\1)
                    ((draw-pixmap board) "PiezasAjedrez/Tapec.png" coordinates)
                    ((draw-pixmap board) "PiezasAjedrez/Tapeb.png" coordinates)
                )
                (void)
            )
        )
        (void)
    )
    (if (< counter 63)
        (DrawPiezes mainPosition (+ counter 1))
        (void)
    )
    (GetPosition mainPosition 0 #\L 0 0)
)
(define (GetPosition pieces preIndex prePieze preX preY)
    (define position (mouse-click-posn (get-mouse-click board)))
    (define positionX (quotient (- (posn-x position) 100) 50))
    (define positionY (quotient (- (posn-y position) 100) 50))
    (define index (+ positionX (* positionY 8)))
    (define pieze (string-ref pieces index))
    (PlayGame pieces pieze index prePieze preIndex preX positionX preY positionY)
)
(define (PlayGame positions selectPieze selectPiezeIndex prePieze preIndex preX posX preY posY)
    (if (and (equal? prePieze #\L) (= preIndex 0))
        (GetPosition positions selectPiezeIndex selectPieze posX posY)
        (void)
    )
    (if (equal? prePieze #\P)
        (MovePeon positions selectPiezeIndex preIndex #\P preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\p)
        (MovePeon positions selectPiezeIndex preIndex #\p preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\T)
        (MoveTorreAndQueen positions selectPiezeIndex preIndex #\T preX posX preY posY)
        (void)
    )        
    (if (equal? prePieze #\t)
        (MoveTorreAndQueen positions selectPiezeIndex preIndex #\t preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\A)
        (MoveAlfilAndQueen positions selectPiezeIndex preIndex "A" preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\a)
        (MoveAlfilAndQueen positions selectPiezeIndex preIndex "a" preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\C)
        (MoveHorse positions selectPiezeIndex preIndex "C" preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\c)
        (MoveHorse positions selectPiezeIndex preIndex "c" preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\Y)
        (MoveKing positions selectPiezeIndex preIndex "Y" preX posX preY posY)
        (void)
    )
    (if (equal? prePieze #\y)
        (MoveKing positions selectPiezeIndex preIndex "y" preX posX preY posY)
        (void)
    )
    (if (or (= posX preX) (= posY preY))
        (begin
            (if (equal? prePieze #\R)
                (MoveTorreAndQueen positions selectPiezeIndex preIndex #\R preX posX preY posY)
                (void)
            )
            (if (equal? prePieze #\r)
                (MoveTorreAndQueen positions selectPiezeIndex preIndex #\r preX posX preY posY)
                (void)
            )
        )
        (begin
            (if (equal? prePieze #\R)
                (MoveAlfilAndQueen positions selectPiezeIndex preIndex "R" preX posX preY posY)
                (void)
            )
            (if (equal? prePieze #\r)
                (MoveAlfilAndQueen positions selectPiezeIndex preIndex "r" preX posX preY posY)
                (void)
            )
        )
    )
    (GetPosition positions 0 #\L 0 0)
)
(define (MoveTorreAndQueen positions selectPiezeIndex preIndex key preX posX preY posY)
    (if (= preX posX)
        (if (< posY preY)
            (if (equal? (string-ref positions selectPiezeIndex) #\-)
                (if (equal? key #\T)
                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                    (if (equal? key #\R)
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        (if (equal? key #\r)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        )
                    )
                )
                (PlayGame positions #\L 0 #\L 0 0 0 0 0)
            )
            (if (equal? (string-ref positions selectPiezeIndex) #\-)
                (if (equal? key #\T)
                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    (if (equal? key #\R)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (if (equal? key #\r)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        )
                    )
                )
                (PlayGame positions #\L 0 #\L 0 0 0 0 0)
            )
        )
        (if (= preY posY)
            (if (< posX preX)
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (if (equal? key #\T)
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "T" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        (if (equal? key #\R)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "R" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (if (equal? key #\r)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "r" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                                (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "t" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            )
                        )
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0)
                )
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (if (equal? key #\T)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "T" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (if (equal? key #\R)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "R" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                            (if (equal? key #\r)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "r" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                                (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "t" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                            )
                        )
                    )
                    (PlayGame positions #\L 0 #\L 0 0 0 0 0)
                )
            )
            (PlayGame positions #\L 0 #\L 0 0 0 0 0)
        )
    )
)
(define (MoveAlfilAndQueen positions selectPiezeIndex preIndex key preX posX preY posY)
    (if (equal? (string-ref positions selectPiezeIndex) #\-)
        (if (> posY preY)
            (if (> posX preX)
                (if (= preIndex (+ selectPiezeIndex (* 9 (- preY posY))))
                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) key (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= preIndex (+ selectPiezeIndex (* 7 (- preY posY))))
                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) key (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)        
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
            (if (> posX preX)
                (if (= preIndex (+ selectPiezeIndex (* 7 (- preY posY))))
                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) key (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= preIndex (+ selectPiezeIndex (* 9 (- preY posY))))
                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) key (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
        )
        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
    )
)
(define (MovePeon positions selectPiezeIndex preIndex key preX posX preY posY)
    (if (equal? key #\P)
        (begin
            (if (and (> preIndex 7) (< preIndex 16) (= selectPiezeIndex (+ preIndex 16)))
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= selectPiezeIndex (+ preIndex 8))
                    (if (equal? (string-ref positions selectPiezeIndex) #\-)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "P" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
        )
        (begin
            (if (and (> preIndex 46) (< preIndex 56) (= selectPiezeIndex (- preIndex 16)))
                (if (equal? (string-ref positions selectPiezeIndex) #\-)
                    (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= selectPiezeIndex (- preIndex 8))
                    (if (equal? (string-ref positions selectPiezeIndex) #\-)
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "p" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                )
        )
    )
)
(define (MoveHorse positions selectPiezeIndex preIndex key preX posX preY posY)
    (if (< preY posY)
        (if (< posX preX)
            (if (= 2 (- posY preY))
                (if (= (- preX 1) posX)
                    (if (equal? key "C")
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= 1 (- posY preY))
                    (if (= (- preX 2) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        )
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
            (if (= 2 (- posY preY))
                (if (= (+ preX 1) posX)
                    (if (equal? key "C")
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= 1 (- posY preY))
                    (if (= (+ preX 2) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "C" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "c" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        )
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
        )
        (if (< posX preX)
            (if (= 2 (- preY posY))
                (if (= (- preX 1) posX)
                    (if (equal? key "C")
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= 1 (- preY posY))
                    (if (= (- preX 2) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        )
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
            (if (= 2 (- preY posY))
                (if (= (+ preX 1) posX)
                    (if (equal? key "C")
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= 1 (- preY posY))
                    (if (= (+ preX 2) posX)
                        (if (equal? key "C")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "C" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "c" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        )
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
        )
    )
)
(define (MoveKing positions selectPiezeIndex preIndex key preX posX preY posY)
    (if (< preY posY)
        (if (= 1 (- posY preY))
            (if (< preX posX)
                (if (= 1 (- posX preX))
                    (if (equal? key "Y")
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= preX posX)
                    (if (equal? key "Y")
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    )
                    (if (= 1 (- preX posX))
                        (if (equal? key "Y")
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    )
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                )
            )
            (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
        )
        (if (= preY posY)
            (if (< preX posX)
                (if (= 1 (- posX preX))
                    (if (equal? key "Y")
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "Y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                        (DrawPiezes (string-append (substring positions 0 preIndex) "-" (substring positions (+ 1 preIndex) selectPiezeIndex) "y" (substring positions (+ selectPiezeIndex 1) (string-length positions))) 0)
                    )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
                (if (= 1 (- preX posX))
                    (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        )
                    (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                )
            )
            (if (= 1 (- preY posY))
                (if (< preX posX)
                    (if (= 1 (- posX preX))
                        (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        )
                        (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                    )
                    (if (= preX posX)
                        (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        )
                        (if (= 1 (- preX posX))
                            (if (equal? key "Y")
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "Y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                            (DrawPiezes (string-append (substring positions 0 selectPiezeIndex) "y" (substring positions (+ 1 selectPiezeIndex) preIndex) "-" (substring positions (+ preIndex 1) (string-length positions))) 0)
                        )
                            (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
                        )
                    )
                )
                (PlayGame positions #\L 0 #\L 0 preX posX preY posY)
            )
        )
    )
)
(DrawPiezes "TCARYACTPPPPPPPP--------------------------------pppppppptcaryact" 0)